spring:
  cloud:
    stream:
      bindings:
        #The queue name prefix
        verisure.ima: 
          #The queue name sufix
          group: config-ack
          contentType: application/json
          consumer:
            #The number of attempts to process the message
            max-attempts: 2 
     
      rabbit:
        bindings:
            consumer:
              #Whether to bind the queue to the destination exchange. Set it to false if you have set up your own infrastructure and have previously created and bound the queue.
              bindQueue: false
              #Whether to declare the exchange for the destination.
              declareExchange: false
              #the binder to create and configure dead-letter queues (DLQs) (and a dead-letter exchange DLX, as well as routing infrastructure). 
              autoBindDlq: false              
              #set requeueRejected to false (the default) so that failed messages are routed to the DLQ, instead of being re-queued.
              requeueRejected: false
              #republishToDlq causes the binder to publish a failed message to the DLQ (instead of rejecting it).
              republishToDlq: true
              #The name of the DLQ
              deadLetterQueueName: verisure.ima.config-ack.dlq

  rabbitmq:
    addresses: ef102pocmom0v.epi.securitasdirect.local:5672
    username: guest
    password: guest
    virtual-host: /


  # Spring Cloud Sleuth tracing extra fields to propagate (HTTP/Rest and messaging)
  sleuth:
    propagation-keys:
    - installationNumber          
    
feign:
  url: http://localhost:8081
  client:
    config:
      osbFeignClient:
        connectTimeout: 5000
        readTimeout: 5000
        #Logger Level: none, basic, headers, full 
        loggerLevel: full
