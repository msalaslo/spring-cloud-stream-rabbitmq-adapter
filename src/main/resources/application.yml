spring:
  cloud:
    stream:
      bindings:
        #The queue name prefix
        messageFromDeviceConfiguration: 
          #The queue name sufix
          group: integration
          contentType: application/json
          consumer:
            #If retry is enabled (maxAttempts > 1), failed messages are delivered to the DLQ after retries are exhausted.
            max-attempts: 2     
      rabbit:
        bindings:
            consumer:
              #the binder to create and configure dead-letter queues (DLQs) (and a dead-letter exchange DLX, as well as routing infrastructure). 
              autoBindDlq: false              
              #If retry is enabled (maxAttempts > 1), failed messages are delivered to the DLQ after retries are exhausted.
              #requeueRejected: true
              #republishToDlq causes the binder to publish a failed message to the DLQ (instead of rejecting it).
              republishToDlq: true
              #Whether to bind the queue to the destination exchange. Set it to false if you have set up your own infrastructure and have previously created and bound the queue.
              bindQueue: false
              #The name of the DLQ
              deadLetterQueueName: messageFromDeviceConfiguration.dlq
              #Whether to declare the exchange for the destination.
              declareExchange: false


  rabbitmq:
    addresses: ef102pocmom0v.epi.securitasdirect.local:5672
    username: integration
    password: integration
    virtual-host: vhintegration


  # Spring Cloud Sleuth tracing extra fields to propagate (HTTP/Rest and messaging)
  sleuth:
    propagation-keys:
    - installationNumber          
    
                    

feign:
  url: http://localhost:8081
  client:
    config:
      osbFeignClient:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: full
        #errorDecoder: com.example.SimpleErrorDecoder
        #retryer: com.example.SimpleRetryer
        #requestInterceptors:
        #  - com.example.FooRequestInterceptor
        #  - com.example.BarRequestInterceptor
        #decode404: false
        #encoder: com.example.SimpleEncoder
        #decoder: com.example.SimpleDecoder
        #contract: com.example.SimpleContract    